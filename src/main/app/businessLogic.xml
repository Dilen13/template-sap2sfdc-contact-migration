<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:spring="http://www.springframework.org/schema/beans" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" 
	  xmlns:json="http://www.mulesoft.org/schema/mule/json" 
	  xmlns:sap="http://www.mulesoft.org/schema/mule/sap" 
	  xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	  xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" 
	  xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      version="EE-3.6.2"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd">

    <data-mapper:config name="XML_To_Contact" transformationGraphPath="xml_to_contact.grf" doc:name="XML_To_Contact"/>
    <data-mapper:config name="SAP_Customer_to_Salesforce_Account" transformationGraphPath="sap_customer_to_salesforce_account.grf" doc:name="SAP_Customer_to_Salesforce_Account"/>

    <batch:job name="syncContactBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <data-mapper:transform config-ref="XML_To_Contact" doc:name="Map XML To Contact"/>
        </batch:input>
        <batch:process-records>
            <batch:step name="getContactInSalesforceStep">
                <enricher source="#[payload]" target="#[recordVars['contactInSalesforce']]" doc:name="store result in 'contactInSalesforce'">
                    <sfdc:query-single config-ref="Salesforce" query="Select Name, Id from Contact where LastName = '#[payload['LastName']]' and FirstName = '#[payload['FirstName']]'" doc:name="Query Salesforce for Contact"/>
                </enricher>
            </batch:step>
            <batch:step name="findOrCreateAccountInSalesforceSet" accept-expression="'syncAccount' == '${account.sync.policy}'">
            
	            <choice doc:name="Choice">
	                	<when expression="#[payload['AccountId'] != null]">
                        <enricher source="#[payload[0]]" target="#[recordVars['sapCustomer']]" doc:name="store result in 'sapCustomer'">
                            <processor-chain doc:name="Processor Chain">
                                <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="BAPI_CUSTOMER_GETDETAIL2" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="Get Customer by Number">
                                    <sap:definition><![CDATA[<BAPI_CUSTOMER_GETDETAIL2 type="function">
	<import>
		<CUSTOMERNO type="field" sapDescription="Customer" sapType="CHAR"
			sapLength="10">#[org.apache.commons.lang3.StringEscapeUtils.escapeXml(payload['AccountId'])]</CUSTOMERNO>
	</import>
  	<tables>
	</tables>
</BAPI_CUSTOMER_GETDETAIL2>
]]></sap:definition>



                                </sap:outbound-endpoint>
                                <data-mapper:transform config-ref="SAP_Customer_to_Salesforce_Account" doc:name="SAP Customer to Salesforce Account"/>
                            </processor-chain>
                        </enricher>
                        <enricher source="#[payload]" target="#[recordVars['sfAccount']]" doc:name="store result in 'sfAccount'">
                            <sfdc:query-single config-ref="Salesforce" query="SELECT Id, Name FROM Account WHERE Name = '#[recordVars['sapCustomer']['Name']]'" doc:name="Query Account in  Salesforce Instance "/>
                        </enricher>

	                <choice doc:name="Choice">
	                    <when expression="#[recordVars['sfAccount'] is NullPayload]">
	                        <enricher doc:name="store result in 'idOfAccountInSalesforce'" target="#[recordVars['idOfAccountInSalesforce']]" source="#[payload]">
		                        <processor-chain doc:name="Processor Chain">

	                                <set-payload value="#[recordVars['sapCustomer']]" doc:name="Set Payload"/>
	       		                     <sfdc:create-single config-ref="Salesforce" type="Account" doc:name="Create Account in Salesforce">

	       	        	             </sfdc:create-single>
	                                <expression-transformer expression="#[payload[0].getId()]" doc:name="Get new account id"/>
		                        </processor-chain>
	                        </enricher>
	                    </when>
	                    <otherwise>

	                        <enricher target="#[recordVars['idOfAccountInSalesforce']]" doc:name="store result in idOfAccountInSalesforce" source="#[payload]">
	     	                   <expression-transformer expression="#[recordVars['sfAccount']['Id']]" doc:name="Get new account id"/>
	                        </enricher>
	                    </otherwise>
	                </choice>
	                <expression-component doc:name="Det AccountId"><![CDATA[payload['AccountId'] = recordVars['idOfAccountInSalesforce'];
	]]></expression-component>
	</when>
	                    <otherwise>
	                        <logger level="INFO" doc:name="Logger" message="There is no Account assigned to this contact. Doing nothing"/>
	                    </otherwise>
	                </choice>            
            
            </batch:step>
            <batch:step name="setDummyAccountIdStep" accept-expression="'assignDummyAccount' == '${account.sync.policy}'">
                <expression-component doc:name="Set dummy AccountId"><![CDATA[payload['AccountId']= '${account.id.in.b}';]]></expression-component>
            </batch:step>            
            <batch:step name="doNotCreateAccountStep" accept-expression="'doNotCreateAccount' == '${account.sync.policy}'">
                <expression-component doc:name="Remove AccountId"><![CDATA[payload.remove('AccountId');]]></expression-component>
            </batch:step>            
            <batch:step name="upsertContactInSalesforceStep">
                <expression-component doc:name="Prepare Contact for upsert"><![CDATA[if (recordVars['contactInSalesforce'] instanceof NullPayload) {
	// Remove ID as it is an insert
	payload.remove('Id')
} else {
	// Add target system ID as it is an update
    payload.put('Id', recordVars['contactInSalesforce']['Id'])
}]]></expression-component>
                <logger message="before upsert  #[payload] " level="INFO" doc:name="Log before upsert"/>

                <batch:commit size="100" doc:name="Batch Commit">
                    <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="Contact" doc:name="Upsert Contact in Salesforce">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="2222 #[payload]" level="INFO" doc:name="Log result"/>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
                    <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                    <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log migration process has finished"/>
                </processor-chain>
                <processor-chain>
                    <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                    <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" connector-ref="gmailConnector" doc:name="Send result of the batch in mail"/>
                </processor-chain>
            </scatter-gather>

        </batch:on-complete>
    </batch:job>
    <flow name="mainFlow"  doc:description="This flow is the entry point to the Kick business logic.
This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.">
        <batch:execute name="syncContactBatch" doc:name="Batch Execute"/>

        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>
</mule>
